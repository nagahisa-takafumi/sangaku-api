"use strict";
/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * sangaku
 * 産学連携のAPIです
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SakeApi = exports.SakeApiFactory = exports.SakeApiFp = exports.SakeApiFetchParamCreator = exports.BreweryApi = exports.BreweryApiFactory = exports.BreweryApiFp = exports.BreweryApiFetchParamCreator = exports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = void 0;
const url = __importStar(require("url"));
const isomorphicFetch = __importStar(require("isomorphic-fetch"));
const BASE_PATH = "/".replace(/\/+$/, "");
/**
 *
 * @export
 */
exports.COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};
/**
 *
 * @export
 * @class BaseAPI
 */
class BaseAPI {
    constructor(configuration, basePath = BASE_PATH, fetch = isomorphicFetch) {
        this.basePath = basePath;
        this.fetch = fetch;
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
}
exports.BaseAPI = BaseAPI;
;
/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
class RequiredError extends Error {
    constructor(field, msg) {
        super(msg);
        this.field = field;
    }
}
exports.RequiredError = RequiredError;
/**
 * BreweryApi - fetch parameter creator
 * @export
 */
const BreweryApiFetchParamCreator = function (configuration) {
    return {
        /**
         * 酒造所の詳細情報を取得
         * @param {any} id 酒造所詳細の情報を取得するためのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBreweryDetail(id, options = {}) {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id', 'Required parameter id was null or undefined when calling getBreweryDetail.');
            }
            const localVarPath = `/breweryDetail/{B_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 酒造所一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBreweryList(options = {}) {
            const localVarPath = `/breweryList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 検索後 酒造所一覧を取得
         * @param {any} keyword 検索欄に入力されたキーワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBreweryList(keyword, options = {}) {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword', 'Required parameter keyword was null or undefined when calling searchBreweryList.');
            }
            const localVarPath = `/breweryList/{keyword}`
                .replace(`{${"keyword"}}`, encodeURIComponent(String(keyword)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.BreweryApiFetchParamCreator = BreweryApiFetchParamCreator;
/**
 * BreweryApi - functional programming interface
 * @export
 */
const BreweryApiFp = function (configuration) {
    return {
        /**
         * 酒造所の詳細情報を取得
         * @param {any} id 酒造所詳細の情報を取得するためのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBreweryDetail(id, options) {
            const localVarFetchArgs = (0, exports.BreweryApiFetchParamCreator)(configuration).getBreweryDetail(id, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 酒造所一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBreweryList(options) {
            const localVarFetchArgs = (0, exports.BreweryApiFetchParamCreator)(configuration).getBreweryList(options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 検索後 酒造所一覧を取得
         * @param {any} keyword 検索欄に入力されたキーワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBreweryList(keyword, options) {
            const localVarFetchArgs = (0, exports.BreweryApiFetchParamCreator)(configuration).searchBreweryList(keyword, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.BreweryApiFp = BreweryApiFp;
/**
 * BreweryApi - factory interface
 * @export
 */
const BreweryApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * 酒造所の詳細情報を取得
         * @param {any} id 酒造所詳細の情報を取得するためのID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBreweryDetail(id, options) {
            return (0, exports.BreweryApiFp)(configuration).getBreweryDetail(id, options)(fetch, basePath);
        },
        /**
         * 酒造所一覧を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBreweryList(options) {
            return (0, exports.BreweryApiFp)(configuration).getBreweryList(options)(fetch, basePath);
        },
        /**
         * 検索後 酒造所一覧を取得
         * @param {any} keyword 検索欄に入力されたキーワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchBreweryList(keyword, options) {
            return (0, exports.BreweryApiFp)(configuration).searchBreweryList(keyword, options)(fetch, basePath);
        },
    };
};
exports.BreweryApiFactory = BreweryApiFactory;
/**
 * BreweryApi - object-oriented interface
 * @export
 * @class BreweryApi
 * @extends {BaseAPI}
 */
class BreweryApi extends BaseAPI {
    /**
     * 酒造所の詳細情報を取得
     * @param {any} id 酒造所詳細の情報を取得するためのID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BreweryApi
     */
    getBreweryDetail(id, options) {
        return (0, exports.BreweryApiFp)(this.configuration).getBreweryDetail(id, options)(this.fetch, this.basePath);
    }
    /**
     * 酒造所一覧を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BreweryApi
     */
    getBreweryList(options) {
        return (0, exports.BreweryApiFp)(this.configuration).getBreweryList(options)(this.fetch, this.basePath);
    }
    /**
     * 検索後 酒造所一覧を取得
     * @param {any} keyword 検索欄に入力されたキーワード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BreweryApi
     */
    searchBreweryList(keyword, options) {
        return (0, exports.BreweryApiFp)(this.configuration).searchBreweryList(keyword, options)(this.fetch, this.basePath);
    }
}
exports.BreweryApi = BreweryApi;
/**
 * SakeApi - fetch parameter creator
 * @export
 */
const SakeApiFetchParamCreator = function (configuration) {
    return {
        /**
         * お酒の詳細を取得
         * @param {any} sakeId 詳細情報を取得したいお酒のID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSakeDetail(sakeId, options = {}) {
            // verify required parameter 'sakeId' is not null or undefined
            if (sakeId === null || sakeId === undefined) {
                throw new RequiredError('sakeId', 'Required parameter sakeId was null or undefined when calling getSakeDetail.');
            }
            const localVarPath = `/sakeDetail/{sakeId}`
                .replace(`{${"sakeId"}}`, encodeURIComponent(String(sakeId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 酒一覧情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSakeList(options = {}) {
            const localVarPath = `/sakeList`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 検索後 酒一覧情報を取得
         * @param {any} keyword 検索単語
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSakeList(keyword, options = {}) {
            // verify required parameter 'keyword' is not null or undefined
            if (keyword === null || keyword === undefined) {
                throw new RequiredError('keyword', 'Required parameter keyword was null or undefined when calling searchSakeList.');
            }
            const localVarPath = `/sakeList/{keyword}`
                .replace(`{${"keyword"}}`, encodeURIComponent(String(keyword)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.SakeApiFetchParamCreator = SakeApiFetchParamCreator;
/**
 * SakeApi - functional programming interface
 * @export
 */
const SakeApiFp = function (configuration) {
    return {
        /**
         * お酒の詳細を取得
         * @param {any} sakeId 詳細情報を取得したいお酒のID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSakeDetail(sakeId, options) {
            const localVarFetchArgs = (0, exports.SakeApiFetchParamCreator)(configuration).getSakeDetail(sakeId, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 酒一覧情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSakeList(options) {
            const localVarFetchArgs = (0, exports.SakeApiFetchParamCreator)(configuration).getSakeList(options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 検索後 酒一覧情報を取得
         * @param {any} keyword 検索単語
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSakeList(keyword, options) {
            const localVarFetchArgs = (0, exports.SakeApiFetchParamCreator)(configuration).searchSakeList(keyword, options);
            return (fetch = isomorphicFetch, basePath = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    }
                    else {
                        throw response;
                    }
                });
            };
        },
    };
};
exports.SakeApiFp = SakeApiFp;
/**
 * SakeApi - factory interface
 * @export
 */
const SakeApiFactory = function (configuration, fetch, basePath) {
    return {
        /**
         * お酒の詳細を取得
         * @param {any} sakeId 詳細情報を取得したいお酒のID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSakeDetail(sakeId, options) {
            return (0, exports.SakeApiFp)(configuration).getSakeDetail(sakeId, options)(fetch, basePath);
        },
        /**
         * 酒一覧情報を取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSakeList(options) {
            return (0, exports.SakeApiFp)(configuration).getSakeList(options)(fetch, basePath);
        },
        /**
         * 検索後 酒一覧情報を取得
         * @param {any} keyword 検索単語
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchSakeList(keyword, options) {
            return (0, exports.SakeApiFp)(configuration).searchSakeList(keyword, options)(fetch, basePath);
        },
    };
};
exports.SakeApiFactory = SakeApiFactory;
/**
 * SakeApi - object-oriented interface
 * @export
 * @class SakeApi
 * @extends {BaseAPI}
 */
class SakeApi extends BaseAPI {
    /**
     * お酒の詳細を取得
     * @param {any} sakeId 詳細情報を取得したいお酒のID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SakeApi
     */
    getSakeDetail(sakeId, options) {
        return (0, exports.SakeApiFp)(this.configuration).getSakeDetail(sakeId, options)(this.fetch, this.basePath);
    }
    /**
     * 酒一覧情報を取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SakeApi
     */
    getSakeList(options) {
        return (0, exports.SakeApiFp)(this.configuration).getSakeList(options)(this.fetch, this.basePath);
    }
    /**
     * 検索後 酒一覧情報を取得
     * @param {any} keyword 検索単語
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SakeApi
     */
    searchSakeList(keyword, options) {
        return (0, exports.SakeApiFp)(this.configuration).searchSakeList(keyword, options)(this.fetch, this.basePath);
    }
}
exports.SakeApi = SakeApi;
//# sourceMappingURL=api.js.map