/* tslint:disable */
/* eslint-disable */
/**
 * sangaku
 * 産学連携のAPIです
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ModelError,
  Sake,
  SakeDetail,
} from '../models';
import {
    ModelErrorFromJSON,
    ModelErrorToJSON,
    SakeFromJSON,
    SakeToJSON,
    SakeDetailFromJSON,
    SakeDetailToJSON,
} from '../models';

export interface GetSakeDetailRequest {
    sakeId: any;
}

export interface SearchSakeListRequest {
    keyword: any;
}

/**
 * 
 */
export class SakeApi extends runtime.BaseAPI {

    /**
     * お酒の詳細を取得
     */
    async getSakeDetailRaw(requestParameters: GetSakeDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SakeDetail>> {
        if (requestParameters.sakeId === null || requestParameters.sakeId === undefined) {
            throw new runtime.RequiredError('sakeId','Required parameter requestParameters.sakeId was null or undefined when calling getSakeDetail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sakeDetail/{sakeId}`.replace(`{${"sakeId"}}`, encodeURIComponent(String(requestParameters.sakeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SakeDetailFromJSON(jsonValue));
    }

    /**
     * お酒の詳細を取得
     */
    async getSakeDetail(requestParameters: GetSakeDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SakeDetail> {
        const response = await this.getSakeDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 酒一覧情報を取得
     */
    async getSakeListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Sake>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sakeList`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SakeFromJSON));
    }

    /**
     * 酒一覧情報を取得
     */
    async getSakeList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Sake>> {
        const response = await this.getSakeListRaw(initOverrides);
        return await response.value();
    }

    /**
     * 検索後 酒一覧情報を取得
     */
    async searchSakeListRaw(requestParameters: SearchSakeListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Sake>>> {
        if (requestParameters.keyword === null || requestParameters.keyword === undefined) {
            throw new runtime.RequiredError('keyword','Required parameter requestParameters.keyword was null or undefined when calling searchSakeList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sakeList/{keyword}`.replace(`{${"keyword"}}`, encodeURIComponent(String(requestParameters.keyword))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(SakeFromJSON));
    }

    /**
     * 検索後 酒一覧情報を取得
     */
    async searchSakeList(requestParameters: SearchSakeListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Sake>> {
        const response = await this.searchSakeListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
