/* tslint:disable */
/* eslint-disable */
/**
 * sangaku
 * 産学連携のAPIです
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BreweryDetail,
  BreweryPlace,
  ModelError,
} from '../models';
import {
    BreweryDetailFromJSON,
    BreweryDetailToJSON,
    BreweryPlaceFromJSON,
    BreweryPlaceToJSON,
    ModelErrorFromJSON,
    ModelErrorToJSON,
} from '../models';

export interface GetBreweryDetailRequest {
    id: any;
}

export interface SearchBreweryListRequest {
    keyword: any;
}

/**
 * 
 */
export class BreweryApi extends runtime.BaseAPI {

    /**
     * 酒造所の詳細情報を取得
     */
    async getBreweryDetailRaw(requestParameters: GetBreweryDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BreweryDetail>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBreweryDetail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/breweryDetail/{B_id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BreweryDetailFromJSON(jsonValue));
    }

    /**
     * 酒造所の詳細情報を取得
     */
    async getBreweryDetail(requestParameters: GetBreweryDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BreweryDetail> {
        const response = await this.getBreweryDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 酒造所一覧を取得
     */
    async getBreweryListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BreweryPlace>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/breweryList`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BreweryPlaceFromJSON));
    }

    /**
     * 酒造所一覧を取得
     */
    async getBreweryList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BreweryPlace>> {
        const response = await this.getBreweryListRaw(initOverrides);
        return await response.value();
    }

    /**
     * 検索後 酒造所一覧を取得
     */
    async searchBreweryListRaw(requestParameters: SearchBreweryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BreweryPlace>>> {
        if (requestParameters.keyword === null || requestParameters.keyword === undefined) {
            throw new runtime.RequiredError('keyword','Required parameter requestParameters.keyword was null or undefined when calling searchBreweryList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/breweryList/{keyword}`.replace(`{${"keyword"}}`, encodeURIComponent(String(requestParameters.keyword))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BreweryPlaceFromJSON));
    }

    /**
     * 検索後 酒造所一覧を取得
     */
    async searchBreweryList(requestParameters: SearchBreweryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BreweryPlace>> {
        const response = await this.searchBreweryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
